// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  orders       Order[]
  storeUsers   StoreUser[]
  productUsers ProductUser[]
  userRoles    UserRole[]

  @@map("user")
}

model UserRole {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  user    User @relation(fields: [user_id], references: [id])
  role    Role @relation(fields: [role_id], references: [id])

  @@map("user_role")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(255)
  UserRoles UserRole[]

  @@map("role")
}

model Order {
  id              Int            @id @default(autoincrement())
  user_id         Int
  order_type_id   Int
  order_status_id Int
  total           BigInt         @db.BigInt
  date            DateTime       @default(now()) @db.Timestamptz
  user            User?          @relation(fields: [user_id], references: [id])
  orderType       OrderType?     @relation(fields: [order_type_id], references: [id])
  orderStatus     OrderStatus?   @relation(fields: [order_status_id], references: [id])
  orderProducts   OrderProduct[]
  transactions    Transaction[]

  @@map("order")
}

model OrderType {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(255)
  orders Order[]

  @@map("order_type")
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(255)
  orders Order[]

  @@map("order_status")
}

model OrderProduct {
  id            Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity_sold Int
  subtotal      BigInt   @db.BigInt
  order         Order?   @relation(fields: [order_id], references: [id])
  product       Product? @relation(fields: [product_id], references: [id])

  @@map("order_product")
}

model Transaction {
  id                    Int                @id @default(autoincrement())
  order_id              Int
  transaction_type_id   Int
  transaction_method_id Int
  amount                BigInt             @db.BigInt
  date                  DateTime           @default(now()) @db.Timestamptz
  order                 Order?             @relation(fields: [order_id], references: [id])
  transactionType       TransactionType?   @relation(fields: [transaction_type_id], references: [id])
  transactionMethod     TransactionMethod? @relation(fields: [transaction_method_id], references: [id])

  @@map("transaction")
}

model TransactionType {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(255)
  transactions Transaction[]

  @@map("transaction_type")
}

model TransactionMethod {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(255)
  transactions Transaction[]

  @@map("transaction_method")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  description   String?        @db.VarChar(255)
  price         BigInt         @db.BigInt
  orderProducts OrderProduct[]
  storeProducts StoreProduct[]
  productUsers  ProductUser[]

  @@map("product")
}

model ProductUser {
  id                 Int      @id @default(autoincrement())
  product_id         Int
  user_id            Int
  quantity_available Int
  product            Product? @relation(fields: [product_id], references: [id])
  user               User?    @relation(fields: [user_id], references: [id])

  @@map("product_user")
}

model StoreProduct {
  id               Int      @id @default(autoincrement())
  product_id       Int
  store_id         Int
  quantity_stocked Int
  product          Product? @relation(fields: [product_id], references: [id])
  store            Store?   @relation(fields: [store_id], references: [id])

  @@map("store_product")
}

model Store {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  storeUsers   StoreUser[]
  storeProduct StoreProduct[]

  @@map("store")
}

model StoreUser {
  id       Int    @id @default(autoincrement())
  store_id Int
  user_id  Int
  store    Store? @relation(fields: [store_id], references: [id])
  user     User?  @relation(fields: [user_id], references: [id])

  @@map("store_user")
}
