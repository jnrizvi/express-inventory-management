// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  role_key     String
  role         Role          @relation(fields: [role_key], references: [key])
  orders       Order[]
  storeUsers   StoreUser[]
  productUsers ProductUser[]

  @@map("user")
}

model Role {
  key         String  @id
  description String? @db.VarChar(255)
  User        User[]

  @@map("role")
}

model Order {
  id               Int            @id @default(autoincrement())
  user_id          Int
  store_id         Int
  order_type_key   String
  order_status_key String
  total            Int
  date             DateTime       @default(now()) @db.Timestamptz
  user             User           @relation(fields: [user_id], references: [id])
  store            Store          @relation(fields: [store_id], references: [id])
  orderType        OrderType      @relation(fields: [order_type_key], references: [key])
  orderStatus      OrderStatus    @relation(fields: [order_status_key], references: [key])
  orderProducts    OrderProduct[]
  transactions     Transaction[]

  @@map("order")
}

model OrderType {
  key         String  @id
  description String? @db.VarChar(255)
  orders      Order[]

  @@map("order_type")
}

model OrderStatus {
  key         String  @id
  description String? @db.VarChar(255)
  orders      Order[]

  @@map("order_status")
}

model OrderProduct {
  id               Int     @id @default(autoincrement())
  order_id         Int
  product_id       Int
  quantity_ordered Int
  subtotal         Int
  order            Order   @relation(fields: [order_id], references: [id])
  product          Product @relation(fields: [product_id], references: [id])

  @@map("order_product")
}

model Transaction {
  id                     Int               @id @default(autoincrement())
  order_id               Int
  transaction_type_key   String
  transaction_status_key String
  transaction_method_key String
  amount                 Int
  date                   DateTime          @default(now()) @db.Timestamptz
  order                  Order             @relation(fields: [order_id], references: [id])
  transactionType        TransactionType   @relation(fields: [transaction_type_key], references: [key])
  transactionStatus      TransactionStatus @relation(fields: [transaction_status_key], references: [key])
  transactionMethod      TransactionMethod @relation(fields: [transaction_method_key], references: [key])

  @@map("transaction")
}

model TransactionType {
  key          String        @id
  description  String?       @db.VarChar(255)
  transactions Transaction[]

  @@map("transaction_type")
}

model TransactionMethod {
  key          String        @id
  description  String?       @db.VarChar(255)
  transactions Transaction[]

  @@map("transaction_method")
}

model TransactionStatus {
  key          String        @id
  description  String?       @db.VarChar(255)
  transactions Transaction[]

  @@map("transaction_status")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  description   String?        @db.VarChar(255)
  price         Int
  orderProducts OrderProduct[]
  storeProducts StoreProduct[]
  productUsers  ProductUser[]

  @@map("product")
}

model ProductUser {
  id                 Int     @id @default(autoincrement())
  product_id         Int
  user_id            Int
  quantity_available Int
  product            Product @relation(fields: [product_id], references: [id])
  user               User    @relation(fields: [user_id], references: [id])

  @@map("product_user")
}

model StoreProduct {
  id               Int     @id @default(autoincrement())
  product_id       Int
  store_id         Int
  quantity_stocked Int
  product          Product @relation(fields: [product_id], references: [id])
  store            Store   @relation(fields: [store_id], references: [id])

  @@map("store_product")
}

model Store {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  storeUsers    StoreUser[]
  storeProducts StoreProduct[]
  orders        Order[]

  @@map("store")
}

model StoreUser {
  id       Int   @id @default(autoincrement())
  store_id Int
  user_id  Int
  store    Store @relation(fields: [store_id], references: [id])
  user     User  @relation(fields: [user_id], references: [id])

  @@map("store_user")
}
